akka {
  loggers          = [de.heikoseeberger.akkalog4j.Log4jLogger]
  logging-filter   = de.heikoseeberger.akkalog4j.Log4jLoggingFilter
  loglevel         = debug
  log-dead-letters = off
  stdout-loglevel  = info

  actor {
    allow-java-serialization = off
    provider                 = cluster

    serialization-bindings {
      "rocks.heikoseeberger.wta.User"                        = user-serializer
      "rocks.heikoseeberger.wta.UserRepository$Serializable" = user-repository-serializer
    }

    serializers {
      user-serializer            = "rocks.heikoseeberger.wta.UserSerializer"
      user-repository-serializer = "rocks.heikoseeberger.wta.UserRepositorySerializer"
    }
  }

  cluster {
    bootstrap {
      contact-point {
        fallback-port = ${akka.cluster.http.management.port} // This is important!
      }
    }

    http {
      management {
        hostname = "" // This is important, "0.0.0.0" won't work!
      }
    }
  }

  extensions = [
    akka.cluster.ddata.DistributedData,
    akka.persistence.Persistence
  ]

  persistence {
    journal {
      auto-start-journals = [cassandra-journal]
      plugin              = cassandra-journal
    }

    snapshot-store {
      auto-start-snapshot-stores = [cassandra-snapshot-store]
      plugin                     = cassandra-snapshot-store
    }
  }
}

wta {
  use-cluster-bootstrap            = on
  user-view-projection-min-backoff = 250 milliseconds
  user-view-projection-max-backoff = 4 seconds

  api {
    address     = "0.0.0.0"
    port        = 8000
    ask-timeout = 3 seconds
  }

  user-view-projection {
    ask-timeout = 3 seconds
  }
}
